// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DeliveryStatus {
  DELIVERED
  INPROGRESS
}

enum PaymentStatus {
  ACCEPTED
  INPROGRESS
  REJECTED
}

enum UserRoles {
  CLIENT
  ADMIN
}

model User {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now())

  email      String    @unique @db.VarChar(255)
  password   String    @db.VarChar(255)
  first_name String?   @db.VarChar(50)
  last_name  String?   @db.VarChar(50)
  role       UserRoles

  orders Order[]

  // auth
  jwt String?

  @@index([email])
}

model Product {
  id         String   @id @default(uuid()) @db.Uuid
  updated_at DateTime @default(now()) @updatedAt
  created_at DateTime @default(now())

  title       String  @unique @db.VarChar(50)
  description String? @db.VarChar(255)
  price       Float
  // image       String?

  orders OrderProduct[]
}

model Order {
  id         String   @id @default(uuid()) @db.Uuid
  created_at DateTime @default(now())

  user     User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id  String         @db.Uuid
  products OrderProduct[]
  payment  Payment?
  delivery Delivery?
}

model OrderProduct {
  id         String   @id @default(uuid()) @db.Uuid
  updated_at DateTime @default(now()) @updatedAt
  created_at DateTime @default(now())

  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id String  @db.Uuid

  order    Order  @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id String @db.Uuid

  count Int   @db.SmallInt
  price Float
}

model Payment {
  id         String   @id @default(uuid()) @db.Uuid
  updated_at DateTime @default(now()) @updatedAt
  created_at DateTime @default(now())

  order    Order  @relation(fields: [order_id], references: [id])
  order_id String @unique @db.Uuid

  amount Float
  status PaymentStatus
}

model Delivery {
  id         String   @id @default(uuid()) @db.Uuid
  updated_at DateTime @default(now()) @updatedAt
  created_at DateTime @default(now())

  order    Order  @relation(fields: [order_id], references: [id])
  order_id String @unique @db.Uuid

  address String
  status  DeliveryStatus
}
